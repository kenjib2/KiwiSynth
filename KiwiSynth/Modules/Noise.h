#ifndef __KIWI_SYNTH_NOISE_H__
#define __KIWI_SYNTH_NOISE_H__



#include "daisysp.h"
#include "../Patch/PatchSettings.h"
#include "KiwiDust.h"



using namespace daisysp;

namespace kiwisynth
{



/*
 * The synth noise module.
 */
class Noise
{
    private:
        static constexpr float DEFAULT_DENSITY = 0.008f;
        NoiseType  noiseType_;
        float      level_;
        float      lastSample_;
        bool       isOn_;
        bool       isNoteTriggered_;
        WhiteNoise white_;
        KiwiDust   dust_;

    public:
        Noise() {}
        ~Noise() {}
        void Init(float sampleRate);

        /*
         * Updates noise parameters based on user input.
         */
        void UpdateSettings(PatchSettings* patchSettings);



        /*
         * Generates noise. The value of the sample received as input will be ignored and overwritten.
         * This method also saves the last generated noise sample for the purpose of sample and hold
         * input.
         */
        inline void Process(float* sample, PatchSettings* patchSettings, float mod, float densityMod)
        {
            if (noiseType_ == 0) {
                lastSample_ = white_.Process() * 0.2;
            } else {
                if (densityMod > 0.002f) {
                    dust_.SetDensity(densityMod * densityMod * densityMod);
                } else {
                    dust_.SetDensity(DEFAULT_DENSITY);
                }
                lastSample_ = dust_.Process();
            }

            if (isOn_) {
                *sample = lastSample_ * fclamp((level_ + mod), -1.0f, 1.0f);
            }
        }



        /*
         * Returns the last sample generated by the white noise module.
         */
        inline float GetLastSample() { return lastSample_; }
};



} // namespace kiwisynth
#endif // __KIWI_SYNTH_NOISE_H__
